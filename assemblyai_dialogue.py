import os
import time
import requests
from pydub import AudioSegment
from config import API_KEY, FOLDER_OUTPUT


async def transcribe_multiple(files: list[str]) -> list[str]:
    results = []
    for file in files:
        txt_path = await transcribe_audio_to_text(file)
        results.append(txt_path)
    return results

async def transcribe_audio_to_text(input_path: str, original_name) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞),
    –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ .mp3 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ AssemblyAI
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ .txt.
    """
    if not os.path.exists(input_path):
        raise FileNotFoundError(f"–§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    name, ext = os.path.splitext(os.path.basename(input_path))
    ext = ext.lower().lstrip(".")

    # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ mp3 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if ext == "mp3":
        mp3_path = input_path  # —É–∂–µ mp3
        print(f"‚ö†Ô∏è –§–∞–π–ª —É–∂–µ –≤ mp3: {mp3_path}")
    else:
        mp3_path = os.path.join("uploads", f"{name}.mp3")
        try:
            audio = AudioSegment.from_file(input_path, format=ext)
            audio.export(mp3_path, format="mp3")
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ mp3: {mp3_path}")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ {ext} –≤ mp3: {e}")

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    with open(mp3_path, "rb") as f:
        upload_response = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": API_KEY},
            files={"file": f}
        )
    audio_url = upload_response.json()["upload_url"]

    # 3. –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    transcribe_response = requests.post(
        "https://api.assemblyai.com/v2/transcript",
        json={
            "audio_url": audio_url,
            "speaker_labels": True,
            "language_code": "ru"
        },
        headers={"authorization": API_KEY}
    )
    transcript_id = transcribe_response.json()["id"]

    # 4. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    polling_endpoint = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
    while True:
        response = requests.get(polling_endpoint, headers={"authorization": API_KEY})
        result = response.json()
        if result["status"] == "completed":
            break
        elif result["status"] == "error":
            raise RuntimeError(result["error"])
        time.sleep(3)

        # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    output_text = ""
    utterances = result.get("utterances")

    if utterances:
        for utterance in utterances:
            speaker = utterance.get("speaker", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            text = utterance.get("text", "")
            output_text += f"–°–ø–∏–∫–µ—Ä {speaker}: {text}\n"
    else:
        output_text = result.get("text", "‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç AssemblyAI")

    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    os.makedirs(FOLDER_OUTPUT, exist_ok=True)
    output_txt_path = os.path.join(FOLDER_OUTPUT, f"{original_name}_{name}.txt")
    with open(output_txt_path, "w", encoding="utf-8") as f:
        f.write(output_text)

    print(f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_txt_path}")
    return output_txt_path